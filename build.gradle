buildscript {

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${property("version.kotlin")}"
        classpath "net.corda.plugins:cordapp:${property("version.corda.gradle.plugins")}"
        classpath "net.corda.plugins:cordformation:${property("version.corda.gradle.plugins")}"
        classpath "net.corda.plugins:quasar-utils:${property("version.corda.gradle.plugins")}"
    }

    ext {
        corda_release_version = property("version.corda")
    }
}

allprojects {
    apply from: "${rootProject.projectDir}/repositories.gradle"
    apply plugin: "org.jetbrains.kotlin.jvm"

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://software.r3.com/artifactory/corda' }
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            javaParameters = true   // Useful for reflection.
        }
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

dependencies {
    // Corda dependencies.
    cordaCompile "net.corda:corda-core:${property("version.corda")}"
    cordaRuntime "net.corda:corda-node-api:${property("version.corda")}"
    cordaRuntime "net.corda:corda:${property("version.corda")}"

    // CorDapp dependencies.
    cordapp project(":workflows")
    cordapp project(":contracts")

    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${property("version.log4j")}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${property("version.log4j")}"
    cordaCompile "org.slf4j:jul-to-slf4j:${property("version.slf4j")}"
}

cordapp {
    info {
        name "Splitcorda"
        vendor "R3"
        targetPlatformVersion = property("corda.platform.version").toInteger()
        minimumPlatformVersion = property("corda.platform.version").toInteger()
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(':contracts')
        cordapp project(':workflows')
        rpcUsers = [[user: "admin", "password": "password", "permissions": ["ALL"]]]
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: false]
        p2pPort 10002
        h2Port 8083
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
    }
    node {
        name "O=Alice,L=London,C=GB"
        p2pPort 10005
        h2Port 8084
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
    }
    node {
        name "O=Bob,L=New York,C=US"
        h2Port 8085
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }
    }
    node {
        name "O=Charlie,L=New York,C=US"
        h2Port 8086
        p2pPort 10011
        rpcSettings {
            address("localhost:10012")
            adminAddress("localhost:10052")
        }
    }
}

task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}


